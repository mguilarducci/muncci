"use strict";var ApplicationConfiguration=function(){var applicationModuleName="muncci",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("payables"),ApplicationConfiguration.registerModule("transactions"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("payables").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Payables","payables","dropdown","/payables/"),Menus.addSubMenuItem("topbar","payables","List payables","payables")}]),angular.module("payables").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPayables",{url:"/payables",templateUrl:"modules/payables/views/list-payables.client.view.html"})}]),angular.module("payables").controller("PayablesController",["$scope","$stateParams","$location","Authentication","Payables",function($scope,$stateParams,$location,Authentication,Payables){$scope.authentication=Authentication,$scope.find=function(){$scope.payables=Payables.query(),console.log($scope.payables)},$scope.rowClass=function(payable){return payable.total>0?"list-group-item-success":"list-group-item-danger"}}]),angular.module("payables").factory("Payables",["$resource",function($resource){return $resource("payables/:payableId",{transactionId:"@_id"},{update:{method:"PUT"}})}]),angular.module("transactions").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Transactions","transactions","dropdown","/transactions(/create)?"),Menus.addSubMenuItem("topbar","transactions","List Transactions","transactions"),Menus.addSubMenuItem("topbar","transactions","New Transaction","transactions/create")}]),angular.module("transactions").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTransactions",{url:"/transactions",templateUrl:"modules/transactions/views/list-transactions.client.view.html"}).state("createTransaction",{url:"/transactions/create",templateUrl:"modules/transactions/views/create-transaction.client.view.html"}).state("viewTransaction",{url:"/transactions/:transactionId",templateUrl:"modules/transactions/views/view-transaction.client.view.html"}).state("editTransaction",{url:"/transactions/:transactionId/edit",templateUrl:"modules/transactions/views/edit-transaction.client.view.html"})}]),angular.module("transactions").controller("TransactionsController",["$scope","$stateParams","$location","Authentication","Transactions",function($scope,$stateParams,$location,Authentication,Transactions){$scope.authentication=Authentication,$scope.create=function(){var transaction=new Transactions({name:this.name,to:this.to,kind:this.kind,status:this.status,value:this.value,date:this.date,dueDate:this.dueDate});transaction.$save(function(response){$location.path("transactions/"+response._id),$scope.name="",$scope.to="",$scope.kind="",$scope.status="",$scope.value="",$scope.date="",$scope.dueDate=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(transaction){if(transaction){transaction.$remove();for(var i in $scope.transactions)$scope.transactions[i]===transaction&&$scope.transactions.splice(i,1)}else $scope.transaction.$remove(function(){$location.path("transactions")})},$scope.update=function(){var transaction=$scope.transaction;transaction.$update(function(){$location.path("transactions")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.transactions=Transactions.query()},$scope.findOne=function(){$scope.transaction=Transactions.get({transactionId:$stateParams.transactionId})},$scope.title=function(transaction,user){var to,kind,fromTo;return transaction.user._id===user._id?("pay"===transaction.kind?(kind="Pagar",fromTo="a"):(kind="Receber",fromTo="de"),to=transaction.friend?transaction.friend.displayName||transaction.to:transaction.to):("pay"===transaction.kind?(kind="Receber",fromTo="de"):(kind="Pagar",fromTo="a"),to=transaction.user.displayName),kind+" R$"+transaction.value+" "+fromTo+" "+to},$scope.canRevoke=function(transaction,user){return transaction.user._id!==user._id&&transaction.to===user.email&&"created"===transaction.status},$scope.canAccept=function(transaction,user){return transaction.user._id!==user._id&&transaction.to===user.email&&("created"===transaction.status||"revoked"===transaction.status)},$scope.canPay=function(transaction,user){return!(transaction.user._id!==user._id&&transaction.to!==user.email||"created"!==transaction.status&&"accepted"!==transaction.status)},$scope.revoke=function(transaction){transaction&&($scope.transaction=transaction),$scope.transaction.status="revoked",$scope.update()},$scope.accept=function(transaction){transaction&&($scope.transaction=transaction),$scope.transaction.status="accepted",$scope.update()},$scope.pay=function(transaction){transaction&&($scope.transaction=transaction),$scope.transaction.status="paid",$scope.update()},$scope.rowClass=function(transaction,user){var classe;switch(transaction.status){case"revoked":classe="list-group-item-danger";break;case"paid":classe="list-group-item-success";break;case"created":classe=transaction.to===user.email?"list-group-item-info":""}return classe}}]),angular.module("transactions").factory("Transactions",["$resource",function($resource){return $resource("transactions/:transactionId",{transactionId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);